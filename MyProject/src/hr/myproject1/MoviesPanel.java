/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.myproject1;

import hr.myProject.dal.MovieRepository;
import hr.myProject.dal.sql.RepositoryFactory;
import hr.myProject.model.Movie;
import hr.myProject.model.MovieTableModel;
import hr.myProject.model.Person;
import hr.myProject.model.PersonAddable;
import hr.myProject.model.PersonTransferable;
import hr.myUilities.utils.FileUtils;
import hr.myUilities.utils.IconUtils;
import hr.myUilities.utils.MessageUtils;
import java.awt.Frame;
import java.awt.Window;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Nina
 */
public class MoviesPanel extends javax.swing.JPanel implements PersonAddable {

    private MovieTableModel tableModel;
    private DefaultListModel<Person> actorsModel;
    private DefaultListModel<Person> allPeople;

    private MovieRepository repository;

    private Movie selectedMovie;
    private Person selectedActor;
    private boolean deleteFromMovie;

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Set<Person> actorsToAddToDB;
    private Set<Person> actorsToRemoveFromDB;

    private static final String DEFAULT_PICTURE_PATH = "/assets/no_image.png";
    private static final String DIR = "assets";

    /**
     * Creates new form MoviesPanel
     */
    public MoviesPanel() {

        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMovies = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        movieTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfOrigTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDirector = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfGenres = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listOfActors = new javax.swing.JList<>();
        lblPicture = new javax.swing.JLabel();
        btnAddMovie = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        lblErrorTitle = new javax.swing.JLabel();
        lblErrorPubDate = new javax.swing.JLabel();
        lblErrorDirector = new javax.swing.JLabel();
        lblErrorGenres = new javax.swing.JLabel();
        lblErrorDuration = new javax.swing.JLabel();
        lblErrorOrigTitle = new javax.swing.JLabel();
        lblErrorDescription = new javax.swing.JLabel();
        lblErrorPicturePath = new javax.swing.JLabel();
        lblErrorActors = new javax.swing.JLabel();
        btnAddPerson = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listOfPeople = new javax.swing.JList<>();
        btnChoose = new javax.swing.JButton();

        pnlMovies.setBackground(new java.awt.Color(204, 204, 255));

        movieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        movieTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(movieTable);

        jLabel1.setText("Title:");

        jLabel2.setText("Original title:");

        jLabel3.setText("Published date:");

        jLabel4.setText("Duration:");

        jLabel5.setText("Director:");

        jLabel6.setText("Genres:");

        jLabel7.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jLabel8.setText("Actors:");

        listOfActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listOfActorsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listOfActors);

        lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        btnAddMovie.setText("Add movie");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        btnUpdateMovie.setText("Update movie");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setText("Delete movie");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        jLabel10.setText("Picture path:");

        tfPicturePath.setEditable(false);

        lblErrorTitle.setForeground(java.awt.Color.red);

        lblErrorPubDate.setForeground(java.awt.Color.red);

        lblErrorDirector.setForeground(java.awt.Color.red);

        lblErrorGenres.setForeground(java.awt.Color.red);

        lblErrorDuration.setForeground(java.awt.Color.red);

        lblErrorOrigTitle.setForeground(java.awt.Color.red);

        lblErrorDescription.setForeground(java.awt.Color.red);

        lblErrorPicturePath.setForeground(java.awt.Color.red);

        lblErrorActors.setForeground(java.awt.Color.red);

        btnAddPerson.setText("Add person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnUpdatePerson.setText("Update person");
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        btnDeletePerson.setText("Delete person");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        jLabel9.setText("All people:");

        listOfPeople.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listOfPeopleMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(listOfPeople);

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMoviesLayout = new javax.swing.GroupLayout(pnlMovies);
        pnlMovies.setLayout(pnlMoviesLayout);
        pnlMoviesLayout.setHorizontalGroup(
            pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMoviesLayout.createSequentialGroup()
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAddPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoviesLayout.createSequentialGroup()
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblErrorDescription)
                                .addGap(26, 26, 26))
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(pnlMoviesLayout.createSequentialGroup()
                                            .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(18, 18, 18)
                                            .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(tfOrigTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrorOrigTitle)
                                                    .addGap(8, 8, 8))))
                                        .addGroup(pnlMoviesLayout.createSequentialGroup()
                                            .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18))
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrorPubDate)
                                                    .addGap(30, 30, 30)))
                                            .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrorDuration)
                                                    .addGap(8, 8, 8))))
                                        .addGroup(pnlMoviesLayout.createSequentialGroup()
                                            .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18))
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrorDirector)
                                                    .addGap(30, 30, 30)))
                                            .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(tfGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrorGenres)
                                                    .addGap(8, 8, 8))))
                                        .addComponent(jScrollPane2)))
                                .addGap(18, 18, 18)))
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoviesLayout.createSequentialGroup()
                                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(57, 57, 57)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblErrorActors)
                                        .addGap(10, 10, 10))
                                    .addComponent(btnUpdatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlMoviesLayout.createSequentialGroup()
                                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnDeletePerson, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMoviesLayout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(jLabel9))
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoviesLayout.createSequentialGroup()
                                        .addGap(285, 285, 285)
                                        .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblErrorPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(153, 153, 153))))
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(470, Short.MAX_VALUE))))
                    .addGroup(pnlMoviesLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlMoviesLayout.setVerticalGroup(
            pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMoviesLayout.createSequentialGroup()
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblErrorPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlMoviesLayout.createSequentialGroup()
                                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblErrorPubDate))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblErrorDirector)
                                                    .addComponent(lblErrorGenres))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblErrorDescription))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblErrorDuration)
                                        .addComponent(lblErrorActors))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoviesLayout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdateMovie, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDeleteMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdatePerson)
                                .addComponent(btnDeletePerson)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddPerson)
                            .addComponent(btnAddMovie))
                        .addGap(202, 202, 202))
                    .addGroup(pnlMoviesLayout.createSequentialGroup()
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorOrigTitle)
                            .addComponent(lblErrorTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfOrigTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlMoviesLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1271, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnlMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 656, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlMovies, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void movieTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieTableMouseClicked
        showMovie();
    }//GEN-LAST:event_movieTableMouseClicked

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        setIcon(lblPicture, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Error", "No movie selected!");
            return;
        }

        if (formValid()) {
            try {
                if (!tfPicturePath.getText().trim().equals(selectedMovie.getPicturePath())) {
                    try {
                        if (selectedMovie.getPicturePath() != null) {
                            Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                        }
                        String path = uploadPicture();
                        selectedMovie.setPicturePath(path);
                    } catch (IOException ex) {
                        Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                selectedMovie.setHrTitle(tfTitle.getText().trim());
                selectedMovie.setEnTitle(tfOrigTitle.getText().trim());
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setGenres(tfGenres.getText().trim());
                selectedMovie.setPublishedDate(LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER));
                selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));

                Person director = getPerson(tfDirector.getText().trim());
                director.setId(repository.createPerson(director));
                selectedMovie.setDirector(director);

                for (Person actorRemove : actorsToRemoveFromDB) {
                    repository.deletePerson(actorRemove.getId());
                }

                for (Person actorAdd : actorsToAddToDB) {
                    actorAdd.setId(repository.createPerson(actorAdd));
                    repository.createMovieActor(actorAdd, selectedMovie);
                }

                repository.updateMovie(selectedMovie.getId(), selectedMovie);

                tableModel.setMovies(repository.selectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Error", "No movie selected!");
            return;
        }
        if (MessageUtils.showConfirmDialog("Warning", "Are you sure you want to delete this movie?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                repository.deleteMovie(selectedMovie.getId());
                tableModel.setMovies(repository.selectMovies());
                clearForm();
                clearActorSets();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (formValid()) {
            try {
                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER),
                        taDescription.getText().trim(),
                        tfOrigTitle.getText().trim(),
                        getPerson(tfDirector.getText().trim()),
                        null,
                        Integer.parseInt(tfDuration.getText().trim()),
                        tfGenres.getText().trim(),
                        tfPicturePath.getText()
                );
                movie.getDirector().setId(repository.createPerson(movie.getDirector()));
                movie.setId(repository.createMovie(movie));
                for (Person actor : actorsToAddToDB) {
                    actor.setId(repository.createPerson(actor));
                    repository.createMovieActor(actor, movie);
                }

                tableModel.setMovies(repository.selectMovies());
                clearForm();
                clearActorSets();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        Window parent = SwingUtilities.windowForComponent(this);
        new AddPersonDialog((Frame) parent, false, this).setVisible(true);
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        try {
            if (selectedActor == null) {
                MessageUtils.showInformationMessage("Error", "No person selected!");
                return;
            }
            if (deleteFromMovie && selectedMovie != null) {
                repository.deleteActorFromMovie(selectedMovie.getId(), selectedActor.getId());
                loadActors(selectedMovie);
                return;
            }
            repository.deletePerson(selectedActor.getId());
            selectedActor = null;
            loadPeople();
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        selectedActor = listOfPeople.getSelectedValue();
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("Error", "No person selected!");
            return;
        }
        Window parent = SwingUtilities.windowForComponent(this);
        new AddPersonDialog((Frame) parent, false, this, selectedActor).setVisible(true);
    }//GEN-LAST:event_btnUpdatePersonActionPerformed

    private void listOfActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listOfActorsMouseClicked
        listOfPeople.clearSelection();
        selectedActor = listOfActors.getSelectedValue();
        deleteFromMovie=true;
    }//GEN-LAST:event_listOfActorsMouseClicked

    private void listOfPeopleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listOfPeopleMouseClicked
        listOfActors.clearSelection();
        selectedActor = listOfPeople.getSelectedValue();
        deleteFromMovie=false;
    }//GEN-LAST:event_listOfPeopleMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblErrorActors;
    private javax.swing.JLabel lblErrorDescription;
    private javax.swing.JLabel lblErrorDirector;
    private javax.swing.JLabel lblErrorDuration;
    private javax.swing.JLabel lblErrorGenres;
    private javax.swing.JLabel lblErrorOrigTitle;
    private javax.swing.JLabel lblErrorPicturePath;
    private javax.swing.JLabel lblErrorPubDate;
    private javax.swing.JLabel lblErrorTitle;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JList<Person> listOfActors;
    private javax.swing.JList<Person> listOfPeople;
    private javax.swing.JTable movieTable;
    private javax.swing.JPanel pnlMovies;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfDirector;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenres;
    private javax.swing.JTextField tfOrigTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initActorsSet();
            initRepository();
            initActors();
            initPeople();
            initTable();
            initDragNDrop();
        } catch (IOException ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfOrigTitle, taDescription, tfPubDate, tfDirector, tfGenres, tfDuration, tfPicturePath);
        errorLabels = Arrays.asList(lblErrorTitle, lblErrorOrigTitle, lblErrorDescription, lblErrorPubDate, lblErrorDirector, lblErrorGenres, lblErrorDuration, lblErrorPicturePath);
    }

    private void initTable() throws Exception {
        movieTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        movieTable.setAutoCreateRowSorter(true);
        movieTable.setRowHeight(25);
        tableModel = new MovieTableModel(repository.selectMovies());
        movieTable.setModel(tableModel);
    }

    private void showMovie() {
        clearForm();
        int selectedRow = movieTable.getSelectedRow();
        int realRowIndex = movieTable.convertRowIndexToModel(selectedRow);

        int id = (int) tableModel.getValueAt(realRowIndex, 0);
        try {
            Optional<Movie> optMovie = repository.selectMovie(id);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
    }

    private void fillForm(Movie movie) {

        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfPicturePath.setText(movie.getPicturePath());
            setIcon(lblPicture, new File(movie.getPicturePath()));
        } else {
            tfPicturePath.setText("");
            setIcon(lblPicture, new File(DEFAULT_PICTURE_PATH));
        }
        tfTitle.setText(movie.getHrTitle());
        tfOrigTitle.setText(movie.getEnTitle());
        taDescription.setText(movie.getDescription());
        tfPubDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        tfDirector.setText(movie.getDirector().toString());
        tfGenres.setText(movie.getGenres());
        tfDuration.setText(String.valueOf(movie.getDuration()));

        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            try {
                tfPicturePath.setText(movie.getPicturePath());
                lblPicture.setIcon(IconUtils.createIcon(new File(movie.getPicturePath()), lblPicture.getWidth(), lblPicture.getHeight()));
            } catch (IOException ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        loadActors(movie);
    }

    private void initRepository() {
        repository = RepositoryFactory.getSqlMovieRepository();
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        tfPubDate.setText("");
        selectedMovie = null;
        lblPicture.setIcon(null);
        actorsModel.clear();
        listOfActors.setModel(actorsModel);
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private void initActors() {
        actorsModel = new DefaultListModel<>();
        listOfActors.setModel(actorsModel);
    }

    private void loadActors(Movie movie) {
        try {
            List<Person> persons = repository.selectMovieActors(movie.getId());
            actorsModel.clear();
            persons.forEach(actorsModel::addElement);
            listOfActors.setModel(actorsModel);
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadPeople() {
        try {
            List<Person> allActors = repository.selectPeople();
            allPeople.clear();
            allActors.forEach(actor -> allPeople.addElement(actor));
            listOfPeople.setModel(allPeople);
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initPeople() {
        allPeople = new DefaultListModel<>();
        listOfPeople.setModel(allPeople);

        loadPeople();
    }

    private void initDragNDrop() {
        listOfPeople.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listOfPeople.setDragEnabled(true);
        listOfPeople.setTransferHandler(new ExportPersonTransferHandler());

        listOfActors.setDropMode(DropMode.ON);
        listOfActors.setTransferHandler(new ImportPersonTransferHandler());
    }

    private boolean formValid() {
        boolean ok = true;
        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }

        if (listOfActors.getModel().getSize() == 0) {
            lblErrorActors.setText("X");
            ok = false;
        } else {
            lblErrorActors.setText("");
        }

        return ok;
    }

    private String uploadPicture() throws IOException {
        String pictureUrl = tfPicturePath.getText().trim();
        String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));

        String pictureName = UUID.randomUUID() + ext;
        String picturePath = DIR + File.separator + pictureName;

        FileUtils.copy(pictureUrl, picturePath);

        return picturePath;
    }

    private Person getPerson(String data) {
        String[] personInfo = data.trim().split(" ", 2);
        switch (personInfo.length) {
            case 1:
                return new Person(personInfo[0], "");
            case 2:
                return new Person(personInfo[0], personInfo[1]);
        }
        throw new IllegalArgumentException("Data could not be handled");
    }

    private void initActorsSet() {
        actorsToAddToDB = new HashSet<>();
        actorsToRemoveFromDB = new HashSet<>();
    }

    private void clearActorSets() {
        actorsToAddToDB.clear();
        actorsToRemoveFromDB.clear();
    }

    @Override
    public void addPerson(Person person, int exists) throws Exception {
        if (exists == -1) {
            repository.createPerson(person);
        } else {
            repository.updatePerson(exists, person);
            loadActors(selectedMovie);
        }
        loadPeople();
    }

    private class ExportPersonTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable(listOfPeople.getSelectedValue());
        }
    }

    private class ImportPersonTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person p = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (!actorsModel.contains(p)) {
                    actorsModel.addElement((Person) p);
                    actorsToAddToDB.add(p);
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
}
