 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.myproject1;

import hr.myProject.dal.MovieRepository;
import hr.myProject.dal.sql.RepositoryFactory;
import hr.myProject.model.Movie;
import hr.myProject.model.Person;
import hr.myProject.parsers.rss.MovieParser;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.xml.stream.XMLStreamException;

/**
 *
 * @author Nina
 */
public class UploadPanel extends javax.swing.JPanel {
    
    private static final String DIR = "assets";
    
    private DefaultListModel<Movie> movieList;
    private MovieRepository movieRepository;        

    /**
     * Creates new form UploadPanel
     */
    public UploadPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listOfMovies = new javax.swing.JList<>();
        btnUpload = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        jScrollPane1.setViewportView(listOfMovies);

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDeleteAll.setText("Delete all movies");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        try {
            List<Movie> movies=MovieParser.parse();
            saveToDatabase(movies);
            loadModel();
        } catch (IOException | XMLStreamException | ParseException ex) {
            Logger.getLogger(UploadPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(UploadPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        try {
            movieRepository.deleteMovies();
            deleteFromFile(new File(DIR));
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> listOfMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        new Thread(() -> {
            try {
                movieRepository=RepositoryFactory.getSqlMovieRepository();
                movieList=new DefaultListModel<>();
                loadModel();
            } catch (Exception ex) {
                Logger.getLogger(UploadPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            }).start();
    }

    private void loadModel() throws Exception {
        List<Movie> movies = movieRepository.selectMovies();
        movieList.clear();
        movies.forEach(movieList::addElement);
        listOfMovies.setModel(movieList);
    }

    private void saveToDatabase(List<Movie> movies) throws Exception {
        
        int id;
        int movieId;
        for (Movie movie : movies) {
            id = movieRepository.createPerson(movie.getDirector());
            movie.getDirector().setId(id);
            movieId = movieRepository.createMovie(movie);
            movie.setId(movieId);
            if (movie.getActors() != null) {
                for (Person actor : movie.getActors()) {
                    id = movieRepository.createPerson(actor);
                    actor.setId(id);
                    movieRepository.createMovieActor(actor, movie);
                }
            }
        }
    }

    private void deleteFromFile(File directory) {
        if (directory.listFiles()!=null) {
            for (File file : directory.listFiles()) {
                if (file.isDirectory()) {
                    deleteFromFile(directory);
                }
                file.delete();
            }
        }
    }
}
